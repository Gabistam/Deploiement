// üéì BTS SIO SLAM - QUIZ INTERACTIFS
// Script pour la gestion des quiz randomis√©s
// Version: 2025 - Compatible ES6+

// Donn√©es des quiz avec r√©ponses √©quilibr√©es en longueur
const quizData = {
    quiz1: {
        title: "Quiz 1 : Risques du d√©ploiement direct",
        questions: [
            {
                question: "Quelle est la principale cons√©quence d'un d√©ploiement direct en production sans test pr√©alable ?",
                answers: [
                    "Am√©lioration automatique des performances du site web",
                    "Risque √©lev√© de dysfonctionnements affectant tous les utilisateurs r√©els",
                    "Optimisation instantan√©e de la base de donn√©es et r√©duction des temps de chargement",
                    "Activation automatique des fonctionnalit√©s de s√©curit√© avanc√©es"
                ],
                correct: 1,
                explanation: "Le d√©ploiement direct en production sans test expose tous les utilisateurs r√©els aux bugs et dysfonctionnements. C'est comme servir un plat non test√© √† tous les clients d'un restaurant - les cons√©quences peuvent √™tre d√©sastreuses pour l'exp√©rience utilisateur et la r√©putation."
            },
            {
                question: "Pourquoi l'expression '√áa marche sur ma machine' est-elle probl√©matique en d√©veloppement ?",
                answers: [
                    "Elle garantit que le code fonctionnera parfaitement en production",
                    "Elle indique que le d√©veloppeur utilise les meilleurs outils disponibles",
                    "Les environnements de d√©veloppement et de production ont des configurations diff√©rentes",
                    "Elle prouve que le code est optimis√© pour tous les navigateurs"
                ],
                correct: 2,
                explanation: "Chaque environnement (d√©veloppement vs production) a ses propres sp√©cificit√©s : syst√®me d'exploitation, versions de logiciels, configurations, donn√©es. Ce qui fonctionne dans un environnement peut √©chouer dans un autre, d'o√π l'importance de tester dans des conditions similaires √† la production."
            },
            {
                question: "Quel impact business peut avoir un d√©ploiement rat√© ?",
                answers: [
                    "Augmentation imm√©diate du chiffre d'affaires de l'entreprise",
                    "Am√©lioration de la satisfaction client et fid√©lisation",
                    "Perte de confiance des utilisateurs et impact sur la r√©putation",
                    "Optimisation automatique des processus internes"
                ],
                correct: 2,
                explanation: "Un d√©ploiement rat√© peut entra√Æner une perte de confiance des utilisateurs, une atteinte √† la r√©putation de l'entreprise, et potentiellement une perte de chiffre d'affaires. Les statistiques montrent que 88% des utilisateurs ne reviendront pas apr√®s une mauvaise exp√©rience."
            },
            {
                question: "Quelle analogie d√©crit le mieux le d√©ploiement direct en production ?",
                answers: [
                    "Servir un nouveau plat directement aux clients sans l'avoir test√© en cuisine",
                    "Utiliser une recette √©prouv√©e avec des ingr√©dients de qualit√©",
                    "Proposer un menu vari√© avec des options pour tous les go√ªts",
                    "Organiser une d√©gustation priv√©e avant l'ouverture officielle"
                ],
                correct: 0,
                explanation: "L'analogie du restaurant est parfaite : comme un chef ne servirait jamais un plat non test√© √† ses clients, un d√©veloppeur ne devrait jamais d√©ployer du code non test√© en production. Les deux mettent en jeu la satisfaction client et la r√©putation."
            },
            {
                question: "Quelle est la responsabilit√© principale d'un d√©veloppeur vis-√†-vis des utilisateurs finaux ?",
                answers: [
                    "D√©ployer le plus rapidement possible pour respecter les d√©lais",
                    "Garantir la disponibilit√© et la fiabilit√© du service avant tout d√©ploiement",
                    "Utiliser uniquement les technologies les plus r√©centes du march√©",
                    "Minimiser le temps de d√©veloppement en sautant les √©tapes de validation"
                ],
                correct: 1,
                explanation: "Le d√©veloppeur a la responsabilit√© de garantir que le service reste disponible et fiable pour les utilisateurs. Cette responsabilit√© implique de suivre des processus rigoureux et de ne jamais prendre de risques inconsid√©r√©s avec la production."
            }
        ]
    },
    quiz2: {
        title: "Quiz 2 : Les 3 environnements",
        questions: [
            {
                question: "Quel est le r√¥le principal de l'environnement de d√©veloppement (DEV) ?",
                answers: [
                    "Servir l'application aux utilisateurs finaux en conditions r√©elles",
                    "Cr√©er, modifier et d√©boguer le code en toute s√©curit√©",
                    "Tester les performances sous charge avec de vraies donn√©es clients",
                    "Valider l'int√©gration avec les syst√®mes externes de production"
                ],
                correct: 1,
                explanation: "L'environnement de d√©veloppement est votre 'atelier' personnel o√π vous pouvez cr√©er, exp√©rimenter et corriger votre code sans aucun risque. C'est l√† que vous avez tous les droits et o√π vous pouvez tout casser sans cons√©quence sur les utilisateurs."
            },
            {
                question: "Pourquoi l'environnement de test doit-il ressembler le plus possible √† la production ?",
                answers: [
                    "Pour r√©duire les co√ªts de d√©veloppement et optimiser les ressources",
                    "Pour d√©tecter les probl√®mes qui pourraient survenir en conditions r√©elles",
                    "Pour permettre aux d√©veloppeurs de travailler plus rapidement",
                    "Pour automatiser compl√®tement le processus de d√©ploiement"
                ],
                correct: 1,
                explanation: "Si l'environnement de test est trop diff√©rent de la production, les tests ne seront pas repr√©sentatifs. C'est comme r√©p√©ter une pi√®ce de th√©√¢tre dans un petit studio alors qu'elle sera jou√©e dans un grand auditorium - les conditions diff√©rentes peuvent r√©v√©ler des probl√®mes inattendus."
            },
            {
                question: "Quelle r√®gle fondamentale doit-on respecter dans la progression entre environnements ?",
                answers: [
                    "D√©ployer directement de DEV vers PROD pour gagner du temps",
                    "Suivre obligatoirement la s√©quence DEV ‚Üí TEST ‚Üí PROD sans exception",
                    "Utiliser uniquement l'environnement de d√©veloppement pour tous les tests",
                    "Alterner al√©atoirement entre les diff√©rents environnements selon les besoins"
                ],
                correct: 1,
                explanation: "La progression DEV ‚Üí TEST ‚Üí PROD est une r√®gle absolue, m√™me pour les corrections mineures. Chaque environnement a son r√¥le sp√©cifique dans la validation du code, et sauter une √©tape expose √† des risques inutiles."
            },
            {
                question: "Quelle caract√©ristique distingue l'environnement de production des autres ?",
                answers: [
                    "Il permet d'exp√©rimenter librement avec de nouvelles technologies",
                    "Il contient uniquement des donn√©es de test pour √©viter les risques",
                    "Il sert les vrais utilisateurs avec des donn√©es r√©elles et critiques",
                    "Il offre un acc√®s complet √† tous les d√©veloppeurs de l'√©quipe"
                ],
                correct: 2,
                explanation: "L'environnement de production est unique car il traite de vraies donn√©es business et sert de vrais utilisateurs. C'est pourquoi il n√©cessite des contraintes strictes : acc√®s limit√©, sauvegardes automatiques, monitoring permanent et proc√©dures d'urgence."
            },
            {
                question: "Quelles donn√©es doit-on utiliser dans l'environnement de test ?",
                answers: [
                    "Uniquement des donn√©es fictives cr√©√©es par les d√©veloppeurs",
                    "Des copies des vraies donn√©es de production, anonymis√©es pour la s√©curit√©",
                    "Les m√™mes donn√©es que l'environnement de d√©veloppement",
                    "Aucune donn√©e pour √©viter tout risque de corruption"
                ],
                correct: 1,
                explanation: "L'environnement de test doit utiliser des copies des vraies donn√©es de production (anonymis√©es pour respecter la confidentialit√©) afin que les tests soient repr√©sentatifs des conditions r√©elles. Des donn√©es fictives peuvent masquer des probl√®mes qui appara√Ætront uniquement avec de vraies donn√©es."
            }
        ]
    },
    quiz3: {
        title: "Quiz 3 : Plan de d√©ploiement",
        questions: [
            {
                question: "Que doit-on faire OBLIGATOIREMENT avant tout d√©ploiement en production ?",
                answers: [
                    "Cr√©er une sauvegarde compl√®te de l'√©tat actuel de la production",
                    "Informer tous les utilisateurs individuellement par email",
                    "D√©sactiver temporairement toutes les fonctionnalit√©s du site",
                    "Attendre une p√©riode de faible trafic pendant les vacances"
                ],
                correct: 0,
                explanation: "La sauvegarde pr√©-d√©ploiement est OBLIGATOIRE. C'est votre filet de s√©curit√© qui vous permet de revenir √† l'√©tat pr√©c√©dent si quelque chose se passe mal. Sans sauvegarde, un d√©ploiement rat√© peut devenir une catastrophe irr√©versible."
            },
            {
                question: "Que sont les 'smoke tests' (tests de fum√©e) ?",
                answers: [
                    "Des tests de s√©curit√© avanc√©s pour d√©tecter les intrusions",
                    "V√©rifications rapides post-d√©ploiement pour s'assurer que tout fonctionne",
                    "Tests de performance intensive sur plusieurs heures cons√©cutives",
                    "Proc√©dures complexes de validation de la base de donn√©es"
                ],
                correct: 1,
                explanation: "Les smoke tests sont des v√©rifications rapides (5-10 minutes) effectu√©es juste apr√®s le d√©ploiement pour s'assurer que les fonctionnalit√©s critiques marchent. Comme un pilote qui v√©rifie ses instruments apr√®s le d√©collage, vous contr√¥lez que tout fonctionne normalement."
            },
            {
                question: "Dans quels cas doit-on d√©clencher un rollback (retour arri√®re) ?",
                answers: [
                    "Uniquement si le site est compl√®tement inaccessible pendant plus d'une heure",
                    "D√®s qu'une fonctionnalit√© critique est cass√©e ou que des erreurs massives apparaissent",
                    "Seulement si le client ou la direction en fait explicitement la demande",
                    "Jamais, il vaut mieux corriger les probl√®mes directement en production"
                ],
                correct: 1,
                explanation: "Le rollback doit √™tre d√©clench√© rapidement d√®s qu'un probl√®me critique est d√©tect√© : site inaccessible, fonctionnalit√© essentielle cass√©e, erreurs massives, ou perte de donn√©es. Plus on attend, plus l'impact sur les utilisateurs est important."
            },
            {
                question: "Pourquoi est-il important de communiquer avec les utilisateurs lors des d√©ploiements ?",
                answers: [
                    "Pour respecter les utilisateurs et maintenir leur confiance en cas d'interruption",
                    "Pour √©viter les obligations l√©gales li√©es aux interruptions de service",
                    "Pour r√©duire la charge serveur pendant la maintenance",
                    "Pour tester la r√©activit√© de la communaut√© d'utilisateurs"
                ],
                correct: 0,
                explanation: "La communication est une marque de respect et de professionnalisme. Informer les utilisateurs √† l'avance des interruptions pr√©vues et les tenir au courant en cas de probl√®me maintient leur confiance et montre que vous vous souciez de leur exp√©rience."
            },
            {
                question: "Quand doit-on tester le plan de rollback ?",
                answers: [
                    "Uniquement apr√®s un d√©ploiement rat√© pour voir s'il fonctionne",
                    "√Ä l'avance sur l'environnement de test pour s'assurer qu'il est op√©rationnel",
                    "Seulement quand le client le demande explicitement par contrat",
                    "Jamais, car cela risque d'endommager l'environnement de production"
                ],
                correct: 1,
                explanation: "Le plan de rollback doit √™tre test√© √† l'avance sur l'environnement de test pour v√©rifier qu'il fonctionne correctement. Un plan de rollback non test√© est comme un parachute de secours qu'on n'a jamais d√©pli√© - on ne sait pas s'il marchera quand on en aura vraiment besoin !"
            }
        ]
    }
};

// Classe pour g√©rer un quiz
class Quiz {
    constructor(quizId, data) {
        this.quizId = quizId;
        this.data = data;
        this.currentQuestion = 0;
        this.score = 0;
        this.selectedAnswer = null;
        this.completed = false;
        this.container = document.getElementById(quizId);
        this.init();
    }

    init() {
        this.render();
    }

    shuffleArray(array) {
        const shuffled = [...array];
        for (let i = shuffled.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
        }
        return shuffled;
    }

    render() {
        if (this.completed) {
            this.renderResults();
            return;
        }

        const question = this.data.questions[this.currentQuestion];
        
        // Cr√©er un array avec les r√©ponses et leurs indices originaux
        const answersWithIndex = question.answers.map((answer, index) => ({
            text: answer,
            originalIndex: index
        }));
        
        // M√©langer les r√©ponses
        const shuffledAnswers = this.shuffleArray(answersWithIndex);

        const html = `
            <div class="quiz-progress">
                <div class="quiz-progress-bar" style="width: ${((this.currentQuestion + 1) / this.data.questions.length) * 100}%"></div>
            </div>
            
            <div class="quiz-question">
                <p><strong>Question ${this.currentQuestion + 1}/${this.data.questions.length}</strong></p>
                <p>${question.question}</p>
            </div>
            
            <div class="quiz-answers">
                ${shuffledAnswers.map((answer, index) => `
                    <button class="quiz-answer" data-index="${answer.originalIndex}">
                        ${answer.text}
                    </button>
                `).join('')}
            </div>
            
            <button class="quiz-btn" id="validate-${this.quizId}" disabled>
                Valider la r√©ponse
            </button>
            
            <div class="quiz-result" id="result-${this.quizId}" style="display: none;"></div>
        `;

        this.container.querySelector('.quiz-content').innerHTML = html;
        this.attachEventListeners();
    }

    attachEventListeners() {
        // Gestion de la s√©lection des r√©ponses
        const answers = this.container.querySelectorAll('.quiz-answer');
        answers.forEach(answer => {
            answer.addEventListener('click', () => {
                // Retirer la s√©lection des autres r√©ponses
                answers.forEach(a => a.classList.remove('selected'));
                
                // S√©lectionner la r√©ponse cliqu√©e
                answer.classList.add('selected');
                this.selectedAnswer = parseInt(answer.dataset.index);
                
                // Activer le bouton de validation
                document.getElementById(`validate-${this.quizId}`).disabled = false;
            });
        });

        // Gestion de la validation
        document.getElementById(`validate-${this.quizId}`).addEventListener('click', () => {
            this.validateAnswer();
        });
    }

    validateAnswer() {
        const question = this.data.questions[this.currentQuestion];
        const answers = this.container.querySelectorAll('.quiz-answer');
        const resultDiv = document.getElementById(`result-${this.quizId}`);
        
        // Afficher les bonnes et mauvaises r√©ponses
        answers.forEach(answer => {
            const answerIndex = parseInt(answer.dataset.index);
            if (answerIndex === question.correct) {
                answer.classList.add('correct');
            } else if (answerIndex === this.selectedAnswer) {
                answer.classList.add('incorrect');
            }
            answer.disabled = true;
        });

        // Calculer le score
        const isCorrect = this.selectedAnswer === question.correct;
        if (isCorrect) {
            this.score++;
        }

        // Afficher le r√©sultat et l'explication
        resultDiv.style.display = 'block';
        resultDiv.innerHTML = `
            <div style="margin-bottom: 1rem;">
                <strong>${isCorrect ? '‚úÖ Correct !' : '‚ùå Incorrect'}</strong>
            </div>
            <div style="margin-bottom: 1rem;">
                <strong>Explication :</strong><br>
                ${question.explanation}
            </div>
            <button class="quiz-btn" id="next-${this.quizId}">
                ${this.currentQuestion < this.data.questions.length - 1 ? 'Question suivante' : 'Voir les r√©sultats'}
            </button>
        `;

        // G√©rer le bouton suivant
        document.getElementById(`next-${this.quizId}`).addEventListener('click', () => {
            if (this.currentQuestion < this.data.questions.length - 1) {
                this.currentQuestion++;
                this.selectedAnswer = null;
                this.render();
            } else {
                this.completed = true;
                this.render();
            }
        });

        // D√©sactiver le bouton de validation
        document.getElementById(`validate-${this.quizId}`).disabled = true;
    }

    renderResults() {
        const percentage = Math.round((this.score / this.data.questions.length) * 100);
        let message = '';
        let messageClass = '';

        if (percentage >= 80) {
            message = 'üéâ Excellent ! Vous ma√Ætrisez parfaitement le sujet.';
            messageClass = 'alert-success';
        } else if (percentage >= 60) {
            message = 'üëç Bien ! Vous avez compris les concepts principaux.';
            messageClass = 'alert-info';
        } else {
            message = 'üìö Il serait b√©n√©fique de relire le chapitre pour consolider vos connaissances.';
            messageClass = 'alert-warning';
        }

        const html = `
            <div class="quiz-score">
                <div style="font-size: 2rem; margin-bottom: 1rem;">
                    Score : ${this.score}/${this.data.questions.length} (${percentage}%)
                </div>
                
                <div class="alert ${messageClass}">
                    ${message}
                </div>
                
                <button class="quiz-btn" id="restart-${this.quizId}">
                    üîÑ Recommencer le quiz
                </button>
            </div>
        `;

        this.container.querySelector('.quiz-content').innerHTML = html;

        // G√©rer le red√©marrage
        document.getElementById(`restart-${this.quizId}`).addEventListener('click', () => {
            this.currentQuestion = 0;
            this.score = 0;
            this.selectedAnswer = null;
            this.completed = false;
            this.render();
        });
    }
}

// Gestion des dropdowns
function initDropdowns() {
    const dropdowns = document.querySelectorAll('.dropdown');
    
    dropdowns.forEach(dropdown => {
        const title = dropdown.querySelector('.dropdown-title');
        
        title.addEventListener('click', () => {
            dropdown.classList.toggle('active');
        });
    });
}

// Gestion de la navigation active
function initNavigation() {
    const navLinks = document.querySelectorAll('.nav-link');
    const sections = document.querySelectorAll('.section');

    // Mettre √† jour la navigation lors du scroll
    window.addEventListener('scroll', () => {
        let current = '';
        sections.forEach(section => {
            const sectionTop = section.offsetTop;
            const sectionHeight = section.clientHeight;
            if (scrollY >= (sectionTop - 200)) {
                current = section.getAttribute('id');
            }
        });

        navLinks.forEach(link => {
            link.classList.remove('active');
            if (link.getAttribute('href') === `#${current}`) {
                link.classList.add('active');
            }
        });
    });
}

// Gestion des checkboxes
function initCheckboxes() {
    const checkboxes = document.querySelectorAll('.checklist-item');
    
    checkboxes.forEach(item => {
        item.addEventListener('click', () => {
            const checkbox = item.querySelector('input[type="checkbox"]');
            checkbox.checked = !checkbox.checked;
        });
    });
}

// Initialisation au chargement de la page
document.addEventListener('DOMContentLoaded', () => {
    // Initialiser les dropdowns
    initDropdowns();
    
    // Initialiser la navigation
    initNavigation();
    
    // Initialiser les checkboxes
    initCheckboxes();
    
    // Initialiser les quiz avec un d√©lai pour l'animation
    setTimeout(() => {
        new Quiz('quiz1', quizData.quiz1);
        new Quiz('quiz2', quizData.quiz2);
        new Quiz('quiz3', quizData.quiz3);
    }, 1000);
    
    console.log('üéì Cours BTS SIO - M√©thodologie de d√©ploiement initialis√© !');
});